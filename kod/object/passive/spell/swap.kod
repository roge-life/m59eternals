// Meridian 59, Copyright 1994-2012 Andrew Kirmse and Chris Kirmse.
// All rights reserved.
//
// This software is distributed under a license that is described in
// the LICENSE file that accompanies it.
//
// Meridian is a registered trademark.


////////////////////////////////////////////////////////////////////////////////
Swap is Spell

constants:

   include blakston.khd

resources:

   include swap.lkod

   swap_name_rsc = "swap"
   swap_icon_rsc = iswap.bgf
   swap_desc_rsc = \
      "The darker gods grant you the power to randomly exchange one "
      "item from your inventory with one from the target's."
   swap_cast_rsc ="You switch places with %s."
   swap_failed_caster = "You point at %s%s, but nothing seems to happen."
   swap_failed_victim = "%s%s points at you, but nothing seems to happen."
   swap_no_target = "Your target is out of range."
   swap_be_sing_pres = "is"
   swap_be_plur_pres = "are"
   swap_sound = qswap.ogg

classvars:

   vrName = swap_name_rsc
   vrIcon = swap_icon_rsc
   vrDesc = swap_desc_rsc

   viSpell_num = SID_SWAP
   viSchool = SS_QOR
   viSpell_level = 5
   viMana = 9

   viChance_To_Increase = 10
   viMeditate_ratio = 50

   viOutlaw = TRUE
   viHarmful = TRUE
   viNoNewbieOffense = TRUE
   viFlash = FLASH_BAD

   vrSucceed_wav = swap_sound

   viCast_time = 3000

   // in seconds, since it works off GetTime()
   viPostCast_time = 5

properties:

messages:

   ResetReagents()
   {
      plReagents = $;
      plReagents = Cons([&DarkAngelFeather,1],plReagents);
      plReagents = Cons([&Yrxlsap,1],plReagents);
      plReagents = Cons([&PurpleMushroom,1],plReagents);

      return;
   }

   GetNumSpellTargets()
   {
      return 1;
   }

   CanPayCosts(who = $, lTargets = $, bItemCast = FALSE)
   {
      local oTarget;

      oTarget = First(lTargets);
      if NOT IsClass(oTarget,&Battler)
      {
         Send(who,@MsgSendUser,
            #message_rsc=spell_bad_target,
            #parm1=vrName,
            #parm2=Send(oTarget,@GetDef),
            #parm3=Send(oTarget,@GetName)
         );

         return FALSE;
      }

      if oTarget = who
      {
         Send(who,@MsgSendUser,#message_rsc=spell_no_self_target,#parm1=vrName);

         return FALSE;
      }

      propagate;
   }

   DoSpellEffects(who = $, lTargets = $, iSpellPower=0)
   {
      local iCol, iRow, iFineCol, iFineRow, oRoom, oTarget;

      if lTargets = $
      {
         Send(who,@MsgSendUser,#message_rsc=swap_no_target);

         return FALSE;
      }

      oTarget = First(lTargets);
      if IsClass(oTarget,&Battler)
      {
         oRoom = Send(oTarget,@GetOwner);
         iCol = Send(who,@GetCol);
         iRow = Send(who,@GetRow);
         iFineCol = Send(who,@GetFineCol);
         iFineRow = Send(who,@GetFineRow);

         if Send(oRoom,@ReqSomethingMoved,
                #what=who,
                #new_col=Send(oTarget,@GetCol),
                #new_row=Send(oTarget,@GetRow),
                #fine_col=Send(oTarget,@GetFineCol),
                #fine_row=Send(oTarget,@GetFineRow))
            AND Send(oRoom,@ReqSomethingMoved,
                #what=oTarget,
                #new_col=iCol,
                #new_row=iRow,
                #fine_col=iFineCol,
                #fine_row=iFineRow)
         {

            Send(oRoom,@SomethingMoved,
               #what=who,
               #new_col=Send(oTarget,@GetCol),
               #new_row=Send(oTarget,@GetRow),
               #fine_col=Send(oTarget,@GetFineCol),
               #fine_row=Send(oTarget,@GetFineRow)
            );

            Send(oRoom,@SomethingMoved,
               #what=oTarget,
               #new_col=iCol,
               #new_row=iRow,
               #fine_col=iFineCol,
               #fine_row=iFineRow
            );

            Send(oTarget,@MsgSendUser,#message_rsc=swap_cast_rsc,#parm1=Send(who,@GetName));
            Send(who,@MsgSendUser,#message_rsc=swap_cast_rsc,#parm1=Send(oTarget,@GetName));
            
            return TRUE;
         }
      }

      return FALSE;
   }

   SpellBannedInArena()
   {
      return TRUE;
   }

end
////////////////////////////////////////////////////////////////////////////////
